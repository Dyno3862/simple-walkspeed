-- This script uses a more advanced method (hookmetamethod) to ensure walkspeed changes stick,
-- even if the game has scripts trying to reset it.

-- Ensure the script doesn't error if hookmetamethod isn't available in your executor
if not hookmetamethod then
    print("Your script executor does not support hookmetamethod. This script may not work correctly.")
    return
end

-- Create the main GUI container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WalkspeedGUI"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Create the main frame for the GUI
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Parent = screenGui
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 2
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -75)
mainFrame.Size = UDim2.new(0, 300, 0, 150)

-- Create a title label which will also act as the drag handle
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Parent = mainFrame
titleLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
titleLabel.BorderSizePixel = 0
titleLabel.Size = UDim2.new(1, 0, 0, 30)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.Text = "Walkspeed Controller"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextSize = 18

-- Create a label to show the current speed
local speedDisplay = Instance.new("TextLabel")
speedDisplay.Name = "SpeedDisplay"
speedDisplay.Parent = mainFrame
speedDisplay.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
speedDisplay.BorderSizePixel = 0
speedDisplay.Position = UDim2.new(0, 0, 0, 40)
speedDisplay.Size = UDim2.new(1, 0, 0, 30)
speedDisplay.Font = Enum.Font.SourceSans
speedDisplay.Text = "Speed: 16"
speedDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
speedDisplay.TextSize = 16

-- Create the slider background
local sliderBackground = Instance.new("Frame")
sliderBackground.Name = "SliderBackground"
sliderBackground.Parent = mainFrame
sliderBackground.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
sliderBackground.BorderColor3 = Color3.fromRGB(20, 20, 20)
sliderBackground.Position = UDim2.new(0.5, -125, 0, 90)
sliderBackground.Size = UDim2.new(0, 250, 0, 20)

-- Create the slider handle
local sliderHandle = Instance.new("TextButton")
sliderHandle.Name = "SliderHandle"
sliderHandle.Parent = sliderBackground
sliderHandle.BackgroundColor3 = Color3.fromRGB(0, 122, 255)
sliderHandle.BorderColor3 = Color3.fromRGB(0, 80, 170)
sliderHandle.Position = UDim2.new(0, 0, 0.5, -10)
sliderHandle.Size = UDim2.new(0, 20, 0, 20)
sliderHandle.Text = ""

-- Script services and variables
local UserInputService = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local minSpeed = 15
local maxSpeed = 39 -- Set max speed to 39
local targetSpeed = 16
local isSliderDragging = false

-- =================================================================
-- Custom Draggable Frame Logic
-- =================================================================
local isFrameDragging = false
local dragStart
local startPos
titleLabel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        isFrameDragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then isFrameDragging = false end
        end)
    end
end)
titleLabel.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if isFrameDragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
end)

-- =================================================================
-- Update Target Speed Function
-- =================================================================
local function updateTargetSpeed()
    local percentage = sliderHandle.Position.X.Offset / (sliderBackground.Size.X.Offset - sliderHandle.Size.X.Offset)
    percentage = math.clamp(percentage, 0, 1)
    local speed = minSpeed + (maxSpeed - minSpeed) * percentage
    targetSpeed = speed
    speedDisplay.Text = "Speed: " .. string.format("%.0f", speed)
    
    -- Also apply the speed directly here just in case
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character.Humanoid.WalkSpeed = targetSpeed
    end
end

-- =================================================================
-- Slider Dragging Logic
-- =================================================================
sliderHandle.MouseButton1Down:Connect(function() isSliderDragging = true end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then isSliderDragging = false end
end)
UserInputService.InputChanged:Connect(function(input)
    if isSliderDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mouseLocation = UserInputService:GetMouseLocation()
        local relativePosition = mouseLocation.X - sliderBackground.AbsolutePosition.X - (sliderHandle.AbsoluteSize.X / 2)
        local minPos = 0
        local maxPos = sliderBackground.AbsoluteSize.X - sliderHandle.AbsoluteSize.X
        relativePosition = math.clamp(relativePosition, minPos, maxPos)
        sliderHandle.Position = UDim2.new(0, relativePosition, 0.5, -10)
        updateTargetSpeed()
    end
end)

-- =================================================================
-- FIX: Walkspeed Enforcement using hookmetamethod
-- =================================================================
-- This is the core of the fix. We intercept any attempt to change a property on the Humanoid.
local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
if humanoid then
    local oldIndex
    oldIndex = hookmetamethod(game, "__newindex", function(self, index, value)
        -- Check if the object being changed is a Humanoid and the property is WalkSpeed
        if self:IsA("Humanoid") and index == "WalkSpeed" then
            -- If the game is trying to set the speed to something other than our target,
            -- we force it to set it to our targetSpeed instead.
            if value ~= targetSpeed then
                return oldIndex(self, index, targetSpeed)
            end
        end
        -- For any other property, let it change normally.
        return oldIndex(self, index, value)
    end)
end

-- We also need to re-apply the hook if the player respawns
player.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    local oldIndex
    oldIndex = hookmetamethod(game, "__newindex", function(self, index, value)
        if self:IsA("Humanoid") and index == "WalkSpeed" then
            if value ~= targetSpeed then
                return oldIndex(self, index, targetSpeed)
            end
        end
        return oldIndex(self, index, value)
    end)
    -- Set the speed on the new character
    humanoid.WalkSpeed = targetSpeed
end)


-- Set initial speed
updateTargetSpeed()
